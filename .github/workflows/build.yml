name: alfresco Extension Inspector Build Workflow

on:
  push:
    branches:
      - master
      - 'fix/**'
      - 'support/**'
      - 'feature/**'
  pull_request:
    types: [opened, synchronize]
    branches:
      - master
      - 'fix/**'
      - 'support/**'
      - 'feature/**'

env:
  SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      # Typical Java workflow steps
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java
        env:
          JAVA_VERSION: 17
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 17

      - name: Setup maven
        shell: bash
        run: |
          [ -d ${HOME}/.m2/ ] || mkdir -p ${HOME}/.m2/
          cp -v _ci/settings.xml ${HOME}/.m2/ || cp -v .travis.settings.xml ${HOME}/.m2/settings.xml

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Log Environmnent variable
        run: |
          echo "API: ${SRCCLR_API_TOKEN}"

      - name: Unit Tests
        run:  bash _ci/unit_tests.sh

  Source-Clear-Scan-SCA:
    runs-on: ubuntu-latest
    steps:
      # Typical Java workflow steps
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java
        env:
          JAVA_VERSION: 17
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 17

      - name: Setup maven
        shell: bash
        run: |
          [ -d ${HOME}/.m2/ ] || mkdir -p ${HOME}/.m2/
          cp -v _ci/settings.xml ${HOME}/.m2/ || cp -v .travis.settings.xml ${HOME}/.m2/settings.xml

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Log Environmnent variable
        run: |
          echo "API: ${SRCCLR_API_TOKEN}"

      - name: Source Clear Scan (SCA)
        run:  bash _ci/source_clear.sh

  Release:
    runs-on: ubuntu-latest
    needs: Source-Clear-Scan-SCA
    if: >
       contains(github.event.head_commit.message, '[release]')
    steps:
      # Typical Java workflow steps
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_KEY }}
            aws-region: eu-west-1
      - name: "Deploy to S3 Staging Bucket"
        run: aws s3 cp --recursive ./deploy_dir s3://alfresco-artefacts-staging

#      - name: Unit Tests
#        run: mvn -B -U clean install --file pom.xml
#
#      - name: Source Clear Scan SCA
#        run: mvn clean install --file pom.xml -DskipTests -Dmaven.javadoc.skip=true com.srcclr:srcclr-maven-plugin:scan -Dcom.srcclr.apiToken=${{ secrets.SRCCLR_API_TOKEN }}